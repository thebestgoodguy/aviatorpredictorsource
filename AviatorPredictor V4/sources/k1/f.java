package k1;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes.dex */
final class f {
    private static List<String> a(String str) {
        int length = str.length();
        p1.b.d(length >= 2, "Invalid path \"%s\"", str);
        if (length == 2) {
            p1.b.d(str.charAt(0) == 1 && str.charAt(1) == 1, "Non-empty path \"%s\" had length 2", str);
            return Collections.emptyList();
        }
        int length2 = str.length() - 2;
        ArrayList arrayList = new ArrayList();
        StringBuilder sb = new StringBuilder();
        int r6 = 0;
        while (r6 < length) {
            int indexOf = str.indexOf(1, r6);
            if (indexOf < 0 || indexOf > length2) {
                throw new IllegalArgumentException("Invalid encoded resource path: \"" + str + "\"");
            }
            int r10 = indexOf + 1;
            char charAt = str.charAt(r10);
            if (charAt == 1) {
                String substring = str.substring(r6, indexOf);
                if (sb.length() != 0) {
                    sb.append(substring);
                    substring = sb.toString();
                    sb.setLength(0);
                }
                arrayList.add(substring);
            } else if (charAt == 16) {
                sb.append(str.substring(r6, indexOf));
                sb.append((char) 0);
            } else {
                if (charAt != 17) {
                    throw new IllegalArgumentException("Invalid encoded resource path: \"" + str + "\"");
                }
                sb.append(str.substring(r6, r10));
            }
            r6 = indexOf + 2;
        }
        return arrayList;
    }

    static l1.u b(String str) {
        return l1.u.w(a(str));
    }

    static <B extends l1.e<B>> String c(B b5) {
        StringBuilder sb = new StringBuilder();
        int s4 = b5.s();
        for (int r22 = 0; r22 < s4; r22++) {
            if (sb.length() > 0) {
                e(sb);
            }
            d(b5.p(r22), sb);
        }
        e(sb);
        return sb.toString();
    }

    private static void d(String str, StringBuilder sb) {
        int length = str.length();
        for (int r12 = 0; r12 < length; r12++) {
            char charAt = str.charAt(r12);
            if (charAt == 0) {
                sb.append((char) 1);
                charAt = 16;
            } else if (charAt == 1) {
                sb.append((char) 1);
                charAt = 17;
            }
            sb.append(charAt);
        }
    }

    private static void e(StringBuilder sb) {
        sb.append((char) 1);
        sb.append((char) 1);
    }

    static String f(String str) {
        StringBuilder sb = new StringBuilder(str);
        int length = sb.length() - 1;
        char charAt = sb.charAt(length);
        p1.b.d(charAt == 1, "successor may only operate on paths generated by encode", new Object[0]);
        sb.setCharAt(length, (char) (charAt + 1));
        return sb.toString();
    }
}
